import React, { useEffect, useState } from 'react';
import { Modal, List, Button, Typography, Popconfirm, message } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';

interface Task {
  id: string;
  name: string;
}

interface DeleteTaskModalProps {
  visible: boolean;
  onClose: () => void;
}

export const DeleteTaskModal: React.FC<DeleteTaskModalProps> = ({ visible, onClose }) => {
  const [projectName, setProjectName] = useState('My Project');
  const [tasks, setTasks] = useState<Task[]>([]);

  useEffect(() => {
    if (visible) {
      // üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –±—ç–∫–∞
      /*
      fetch('/api/project/tasks')
        .then(res => res.json())
        .then(data => {
          setProjectName(data.projectName);
          setTasks(data.tasks); // [{ id, name }]
        })
        .catch(console.error);
      */

      // üß™ –ü—Ä–∏–º–µ—Ä
      setProjectName('Demo Project');
      setTasks([
        { id: '1', name: '–°–¥–µ–ª–∞—Ç—å –≤–µ—Ä—Å—Ç–∫—É' },
        { id: '2', name: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD' },
        { id: '3', name: '–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã' },
      ]);
    }
  }, [visible]);

  const handleDelete = (id: string) => {
    // üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    /*
    fetch('/api/tasks/' + id, { method: 'DELETE' })
      .then(() => setTasks(prev => prev.filter(t => t.id !== id)))
      .catch(() => message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è'));
    */

    setTasks(prev => prev.filter(t => t.id !== id)); // mock
    message.success('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
  };

  return (
    <Modal
      open={visible}
      onCancel={onClose}
      footer={null}
      title={`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: ${projectName}`}
      centered
    >
      <List
        dataSource={tasks}
        renderItem={(task) => (
          <List.Item
            actions={[
              <Popconfirm title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?" onConfirm={() => handleDelete(task.id)}>
                <Button danger icon={<DeleteOutlined />} />
              </Popconfirm>
            ]}
          >
            <Typography.Text>{task.name}</Typography.Text>
          </List.Item>
        )}
      />
    </Modal>
  );
};
